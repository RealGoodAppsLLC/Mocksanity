<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>

using System;
using System.Linq.Expressions;
using BindingFlags = System.Reflection.BindingFlags;

namespace RealGoodApps.Mocksanity
{
    public static class MocksaneInitializer
    {
        public static BaseMocksaneVoid<TInstance> Initialize<TInstance>(
            TInstance instance,
            Expression<Action<TInstance>> expression,
            Action<MocksaneParameters> callbackFunction = null,
            Func<MocksaneParameters, bool> predicateFunction = null)
            where TInstance : class
        {
            var evaluation = MocksaneExpression.Evaluate(expression);

            Type unboundedType;
            Type boundedType;

            switch (evaluation.ParameterCount)
            {
<#
    for (var parameterCount = 0; parameterCount <= 14; parameterCount++)
    {
        var commasString = new StringBuilder();
        var evaluationString = new StringBuilder();

        for (var commaNumber = 1; commaNumber <= parameterCount; commaNumber++)
        {
            commasString.Append(",");
        }

        for (var evaluationParamIndex = 0; evaluationParamIndex < parameterCount; evaluationParamIndex++)
        {
            evaluationString.Append($", evaluation.ParameterTypes[{evaluationParamIndex}]");
        }
#>
                case <#= parameterCount #>:
                    unboundedType = typeof(MocksaneVoid<<#= commasString.ToString() #>>);
                    boundedType = unboundedType.MakeGenericType(typeof(TInstance)<#= evaluationString.ToString() #>);
                    break;
<#
    }
#>
                default:
                    throw new InvalidOperationException("The expression has more than the maximum number of parameters.");
            }

            var constructorInfo = boundedType.GetConstructor(
                BindingFlags.Instance | BindingFlags.NonPublic,
                null,
                new[]
                {
                    typeof(TInstance),
                    typeof(MocksaneExpression),
                    typeof(Action<MocksaneParameters>),
                    typeof(Func<MocksaneParameters, bool>),
                },
                null);

            if (constructorInfo == null)
            {
                throw new NotSupportedException("Something went wrong. This should never happen, please file a bug report!");
            }

            var mocksane = (BaseMocksaneVoid<TInstance>)constructorInfo.Invoke(new object[] { instance, evaluation, callbackFunction, predicateFunction });
            mocksane.InitializeHook();

            return mocksane;
        }

        public static BaseMocksaneWithResult<TInstance, TResult> Initialize<TInstance, TResult>(
            TInstance instance,
            Expression<Func<TInstance, TResult>> expression,
            Func<MocksaneParameters, TResult> returnsFunction = null,
            Func<MocksaneParameters, bool> predicateFunction = null)
            where TInstance : class
        {
            var evaluation = MocksaneExpression.Evaluate(expression);

            Type unboundedType;
            Type boundedType;

            switch (evaluation.ParameterCount)
            {
<#
    for (var parameterCount = 0; parameterCount <= 14; parameterCount++)
    {
        var commasString = new StringBuilder();
        var evaluationString = new StringBuilder();

        for (var commaNumber = 1; commaNumber <= parameterCount + 1; commaNumber++)
        {
            commasString.Append(",");
        }

        for (var evaluationParamIndex = 0; evaluationParamIndex < parameterCount; evaluationParamIndex++)
        {
            evaluationString.Append($"evaluation.ParameterTypes[{evaluationParamIndex}], ");
        }
#>
                case <#= parameterCount #>:
                    unboundedType = typeof(MocksaneWithResult<<#= commasString.ToString() #>>);
                    boundedType = unboundedType.MakeGenericType(typeof(TInstance), <#= evaluationString.ToString() #>typeof(TResult));
                    break;
<#
    }
#>
                default:
                    throw new InvalidOperationException("The expression has more than the maximum number of parameters.");
            }

            var constructorInfo = boundedType.GetConstructor(
                BindingFlags.Instance | BindingFlags.NonPublic,
                null,
                new[]
                {
                    typeof(TInstance),
                    typeof(MocksaneExpression),
                    typeof(Func<MocksaneParameters, TResult>),
                    typeof(Func<MocksaneParameters, bool>),
                },
                null);

            if (constructorInfo == null)
            {
                throw new NotSupportedException("Something went wrong. This should never happen, please file a bug report!");
            }

            var mocksane = (BaseMocksaneWithResult<TInstance, TResult>)constructorInfo.Invoke(new object[] { instance, evaluation, returnsFunction, predicateFunction });
            mocksane.InitializeHook();

            return mocksane;
        }
    }
}
